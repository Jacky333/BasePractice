定义：代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。

为什么要用代理模式？
1.中介隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，
其特征是代理类和委托类实现相同的接口。
2.开闭原则，增加功能：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，
这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。

代理模式按照创建时期分为两类：
1.静态代理：程序运行前，代理类class文件已经被创建；
2.动态代理：程序运行时，代理类class文件通过反射机制动态创建的。

静态代理总结：
优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。
缺点：我们为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改，耦合度高。

动态代理：JDK动态代理与CGLib动态代理。

JDK动态代理：利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。
优点：大大减少了我们的开发任务，同时减少了对业务接口的依赖，降低了耦合度。
缺点：动态代理的对象必须实现一个或多个接口。

CGLib动态代理：针对类来实现代理，修改指定的业务类字节码生成一个子类，并覆盖其中业务方法实现代理。

反射是：指程序可以访问、检测和修改它本身状态或行为的一种能力。
JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；
这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。要想解剖一个类,必须先要获取到该类的字节码文件对象。
而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.
